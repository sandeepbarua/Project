//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PresentationLayer.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DQFEntities : DbContext
    {
        public DQFEntities()
            : base("name=DQFEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccidentRecordDetail> AccidentRecordDetails { get; set; }
        public virtual DbSet<AuditQuestion> AuditQuestions { get; set; }
        public virtual DbSet<AuditRuleClassification> AuditRuleClassifications { get; set; }
        public virtual DbSet<CEDPreviousEmployerDetail> CEDPreviousEmployerDetails { get; set; }
        public virtual DbSet<CMS_CPScreenData> CMS_CPScreenData { get; set; }
        public virtual DbSet<CMS_CPScreenData_Temp> CMS_CPScreenData_Temp { get; set; }
        public virtual DbSet<ConvictionDetail> ConvictionDetails { get; set; }
        public virtual DbSet<CurrentEmployerDetail> CurrentEmployerDetails { get; set; }
        public virtual DbSet<CurrentResidenceDetail> CurrentResidenceDetails { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<DocumentTypeEntryDetail> DocumentTypeEntryDetails { get; set; }
        public virtual DbSet<DriverLicenceDetail> DriverLicenceDetails { get; set; }
        public virtual DbSet<DriverLicenseStatusDetail> DriverLicenseStatusDetails { get; set; }
        public virtual DbSet<DropDownValueText> DropDownValueTexts { get; set; }
        public virtual DbSet<DynamicControl> DynamicControls { get; set; }
        public virtual DbSet<DynamicControlValue> DynamicControlValues { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ExcelErrorLog> ExcelErrorLogs { get; set; }
        public virtual DbSet<Exception_FormData> Exception_FormData { get; set; }
        public virtual DbSet<FormData> FormDatas { get; set; }
        public virtual DbSet<LebellingLog> LebellingLogs { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LoginDetail> LoginDetails { get; set; }
        public virtual DbSet<PreviousEmployerDetail> PreviousEmployerDetails { get; set; }
        public virtual DbSet<PreviousEmploymentDetail> PreviousEmploymentDetails { get; set; }
        public virtual DbSet<PreviousResidenceDetail> PreviousResidenceDetails { get; set; }
        public virtual DbSet<RoboActivity> RoboActivities { get; set; }
        public virtual DbSet<TaskOperation> TaskOperations { get; set; }
        public virtual DbSet<TempTaskAssignment> TempTaskAssignments { get; set; }
        public virtual DbSet<TempTaskMatchDetail> TempTaskMatchDetails { get; set; }
        public virtual DbSet<TrafficConvictionsDetail> TrafficConvictionsDetails { get; set; }
        public virtual DbSet<TypeOfEquipmentDetail> TypeOfEquipmentDetails { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<BarchartData> BarchartDatas { get; set; }
        public virtual DbSet<DE_stat_table> DE_stat_table { get; set; }
        public virtual DbSet<Document_Table_Relation> Document_Table_Relation { get; set; }
        public virtual DbSet<DriverFilesValue> DriverFilesValues { get; set; }
        public virtual DbSet<Exception_CPScreenData> Exception_CPScreenData { get; set; }
        public virtual DbSet<FaxidProcessingSummry> FaxidProcessingSummries { get; set; }
        public virtual DbSet<FormDataBackup> FormDataBackups { get; set; }
        public virtual DbSet<MVRExpirationDateLogic> MVRExpirationDateLogics { get; set; }
    
        [DbFunction("DQFEntities", "DatesBetween")]
        public virtual IQueryable<DatesBetween_Result> DatesBetween(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DatesBetween_Result>("[DQFEntities].[DatesBetween](@startDate, @endDate)", startDateParameter, endDateParameter);
        }
    
        [DbFunction("DQFEntities", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> fnSplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitString_Result>("[DQFEntities].[fnSplitString](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("DQFEntities", "splitstring")]
        public virtual IQueryable<splitstring_Result> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitstring_Result>("[DQFEntities].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        public virtual int AddDriverFilesValue(Nullable<int> cPScreenDataId, Nullable<int> faxid, Nullable<int> documentId, Nullable<int> countForFaxID, string first_name, string last_name, string driver_License_Number, string issuing_State_Of_Driver_License, string examiner_National_Registry_Number, string driver_Date_Of_Birth, string expiration_Date, string sSN_Number, string driver_License_Expiration_Date, string driver_License_Class, string endorsement, string restrictions, string cDL_Or_Non_CDL_Driver)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var faxidParameter = faxid.HasValue ?
                new ObjectParameter("Faxid", faxid) :
                new ObjectParameter("Faxid", typeof(int));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var countForFaxIDParameter = countForFaxID.HasValue ?
                new ObjectParameter("CountForFaxID", countForFaxID) :
                new ObjectParameter("CountForFaxID", typeof(int));
    
            var first_nameParameter = first_name != null ?
                new ObjectParameter("First_name", first_name) :
                new ObjectParameter("First_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("Last_name", last_name) :
                new ObjectParameter("Last_name", typeof(string));
    
            var driver_License_NumberParameter = driver_License_Number != null ?
                new ObjectParameter("Driver_License_Number", driver_License_Number) :
                new ObjectParameter("Driver_License_Number", typeof(string));
    
            var issuing_State_Of_Driver_LicenseParameter = issuing_State_Of_Driver_License != null ?
                new ObjectParameter("Issuing_State_Of_Driver_License", issuing_State_Of_Driver_License) :
                new ObjectParameter("Issuing_State_Of_Driver_License", typeof(string));
    
            var examiner_National_Registry_NumberParameter = examiner_National_Registry_Number != null ?
                new ObjectParameter("Examiner_National_Registry_Number", examiner_National_Registry_Number) :
                new ObjectParameter("Examiner_National_Registry_Number", typeof(string));
    
            var driver_Date_Of_BirthParameter = driver_Date_Of_Birth != null ?
                new ObjectParameter("Driver_Date_Of_Birth", driver_Date_Of_Birth) :
                new ObjectParameter("Driver_Date_Of_Birth", typeof(string));
    
            var expiration_DateParameter = expiration_Date != null ?
                new ObjectParameter("Expiration_Date", expiration_Date) :
                new ObjectParameter("Expiration_Date", typeof(string));
    
            var sSN_NumberParameter = sSN_Number != null ?
                new ObjectParameter("SSN_Number", sSN_Number) :
                new ObjectParameter("SSN_Number", typeof(string));
    
            var driver_License_Expiration_DateParameter = driver_License_Expiration_Date != null ?
                new ObjectParameter("Driver_License_Expiration_Date", driver_License_Expiration_Date) :
                new ObjectParameter("Driver_License_Expiration_Date", typeof(string));
    
            var driver_License_ClassParameter = driver_License_Class != null ?
                new ObjectParameter("Driver_License_Class", driver_License_Class) :
                new ObjectParameter("Driver_License_Class", typeof(string));
    
            var endorsementParameter = endorsement != null ?
                new ObjectParameter("Endorsement", endorsement) :
                new ObjectParameter("Endorsement", typeof(string));
    
            var restrictionsParameter = restrictions != null ?
                new ObjectParameter("Restrictions", restrictions) :
                new ObjectParameter("Restrictions", typeof(string));
    
            var cDL_Or_Non_CDL_DriverParameter = cDL_Or_Non_CDL_Driver != null ?
                new ObjectParameter("CDL_Or_Non_CDL_Driver", cDL_Or_Non_CDL_Driver) :
                new ObjectParameter("CDL_Or_Non_CDL_Driver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDriverFilesValue", cPScreenDataIdParameter, faxidParameter, documentIdParameter, countForFaxIDParameter, first_nameParameter, last_nameParameter, driver_License_NumberParameter, issuing_State_Of_Driver_LicenseParameter, examiner_National_Registry_NumberParameter, driver_Date_Of_BirthParameter, expiration_DateParameter, sSN_NumberParameter, driver_License_Expiration_DateParameter, driver_License_ClassParameter, endorsementParameter, restrictionsParameter, cDL_Or_Non_CDL_DriverParameter);
        }
    
        public virtual ObjectResult<CheckAuditRules_Result> CheckAuditRules(Nullable<int> documentid)
        {
            var documentidParameter = documentid.HasValue ?
                new ObjectParameter("Documentid", documentid) :
                new ObjectParameter("Documentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckAuditRules_Result>("CheckAuditRules", documentidParameter);
        }
    
        public virtual int CMScpScreenBackup(Nullable<int> faxID, Nullable<System.DateTime> receiveDate, Nullable<int> pages)
        {
            var faxIDParameter = faxID.HasValue ?
                new ObjectParameter("FaxID", faxID) :
                new ObjectParameter("FaxID", typeof(int));
    
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CMScpScreenBackup", faxIDParameter, receiveDateParameter, pagesParameter);
        }
    
        public virtual int CMScpScreenTempBackup(Nullable<int> faxID, Nullable<System.DateTime> receiveDate, Nullable<int> pages)
        {
            var faxIDParameter = faxID.HasValue ?
                new ObjectParameter("FaxID", faxID) :
                new ObjectParameter("FaxID", typeof(int));
    
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CMScpScreenTempBackup", faxIDParameter, receiveDateParameter, pagesParameter);
        }
    
        public virtual int CreateBarchartData(Nullable<decimal> amt, string type, Nullable<int> clientId)
        {
            var amtParameter = amt.HasValue ?
                new ObjectParameter("amt", amt) :
                new ObjectParameter("amt", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateBarchartData", amtParameter, typeParameter, clientIdParameter);
        }
    
        public virtual int documentValueTest(Nullable<int> dataID, Nullable<int> documentTypeID, Nullable<int> countForFaxId)
        {
            var dataIDParameter = dataID.HasValue ?
                new ObjectParameter("DataID", dataID) :
                new ObjectParameter("DataID", typeof(int));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("documentValueTest", dataIDParameter, documentTypeIDParameter, countForFaxIdParameter);
        }
    
        public virtual int EndorsementRestriction(Nullable<int> dataID, Nullable<int> documentTypeID, Nullable<int> countForFaxId)
        {
            var dataIDParameter = dataID.HasValue ?
                new ObjectParameter("DataID", dataID) :
                new ObjectParameter("DataID", typeof(int));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EndorsementRestriction", dataIDParameter, documentTypeIDParameter, countForFaxIdParameter);
        }
    
        public virtual ObjectResult<GetDashboardData_Result> GetDashboardData(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboardData_Result>("GetDashboardData", clientIdParameter);
        }
    
        public virtual ObjectResult<InputForRoboToCreateDriversFile_Result> InputForRoboToCreateDriversFile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InputForRoboToCreateDriversFile_Result>("InputForRoboToCreateDriversFile");
        }
    
        public virtual ObjectResult<InputForRoboToProcess_Result> InputForRoboToProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InputForRoboToProcess_Result>("InputForRoboToProcess");
        }
    
        public virtual int UpdateErrorLog(Nullable<int> cPScreenDataID, Nullable<int> tempCPScreenDataID, Nullable<int> robotID, string errorLine, string errorMessage)
        {
            var cPScreenDataIDParameter = cPScreenDataID.HasValue ?
                new ObjectParameter("CPScreenDataID", cPScreenDataID) :
                new ObjectParameter("CPScreenDataID", typeof(int));
    
            var tempCPScreenDataIDParameter = tempCPScreenDataID.HasValue ?
                new ObjectParameter("TempCPScreenDataID", tempCPScreenDataID) :
                new ObjectParameter("TempCPScreenDataID", typeof(int));
    
            var robotIDParameter = robotID.HasValue ?
                new ObjectParameter("RobotID", robotID) :
                new ObjectParameter("RobotID", typeof(int));
    
            var errorLineParameter = errorLine != null ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateErrorLog", cPScreenDataIDParameter, tempCPScreenDataIDParameter, robotIDParameter, errorLineParameter, errorMessageParameter);
        }
    
        public virtual int UpdateLabelingFlag(Nullable<int> cPScreenDataID)
        {
            var cPScreenDataIDParameter = cPScreenDataID.HasValue ?
                new ObjectParameter("CPScreenDataID", cPScreenDataID) :
                new ObjectParameter("CPScreenDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLabelingFlag", cPScreenDataIDParameter);
        }
    
        public virtual ObjectResult<string> usp_CEDRDTEST_AuditRule(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_CEDRDTEST_AuditRule", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> usp_ConvictionDetails_AuditRule_DELETED(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ConvictionDetails_AuditRule_DELETED", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> usp_PreviousEmploymentDetail(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_PreviousEmploymentDetail", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> usp_PreviousEmploymentDetail_Employee_Gap(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_PreviousEmploymentDetail_Employee_Gap", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> usp_PreviousEmploymentDetail_Employee_Gap_bkp(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_PreviousEmploymentDetail_Employee_Gap_bkp", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> usp_PreviousEmploymentDetail_Scope_verified(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_PreviousEmploymentDetail_Scope_verified", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> usp_RIRDTEST_AuditRule(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_RIRDTEST_AuditRule", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<uspAutoTaskAssignmentByUserId_Result> uspAutoTaskAssignmentByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAutoTaskAssignmentByUserId_Result>("uspAutoTaskAssignmentByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<string> uspCEDPreviousEmployerAuditRule(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspCEDPreviousEmployerAuditRule", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> uspCEDPreviousEmployerAuditRule_Prod(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspCEDPreviousEmployerAuditRule_Prod", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<uspCEDPreviousEmployerAuditRule_Prod_bkp_Result> uspCEDPreviousEmployerAuditRule_Prod_bkp(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCEDPreviousEmployerAuditRule_Prod_bkp_Result>("uspCEDPreviousEmployerAuditRule_Prod_bkp", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<string> uspCEDPreviousEmployerAuditRule_Prod_ver1(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspCEDPreviousEmployerAuditRule_Prod_ver1", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<uspCheckDocumentTypeIdForExceptionTable_Result> uspCheckDocumentTypeIdForExceptionTable(Nullable<int> faxId)
        {
            var faxIdParameter = faxId.HasValue ?
                new ObjectParameter("FaxId", faxId) :
                new ObjectParameter("FaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckDocumentTypeIdForExceptionTable_Result>("uspCheckDocumentTypeIdForExceptionTable", faxIdParameter);
        }
    
        public virtual ObjectResult<string> uspEndorsementAndRestrictionsAuditRule(Nullable<int> cPScreenDataId, Nullable<int> documentTypeId, Nullable<int> countForFaxId, Nullable<int> questionId)
        {
            var cPScreenDataIdParameter = cPScreenDataId.HasValue ?
                new ObjectParameter("CPScreenDataId", cPScreenDataId) :
                new ObjectParameter("CPScreenDataId", typeof(int));
    
            var documentTypeIdParameter = documentTypeId.HasValue ?
                new ObjectParameter("DocumentTypeId", documentTypeId) :
                new ObjectParameter("DocumentTypeId", typeof(int));
    
            var countForFaxIdParameter = countForFaxId.HasValue ?
                new ObjectParameter("CountForFaxId", countForFaxId) :
                new ObjectParameter("CountForFaxId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspEndorsementAndRestrictionsAuditRule", cPScreenDataIdParameter, documentTypeIdParameter, countForFaxIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<uspGetAllEnteredPageNo_Result> uspGetAllEnteredPageNo(Nullable<int> userId, Nullable<int> tempCPScreenDataID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var tempCPScreenDataIDParameter = tempCPScreenDataID.HasValue ?
                new ObjectParameter("TempCPScreenDataID", tempCPScreenDataID) :
                new ObjectParameter("TempCPScreenDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllEnteredPageNo_Result>("uspGetAllEnteredPageNo", userIdParameter, tempCPScreenDataIDParameter);
        }
    
        public virtual int uspGetDynamicControlValueByDocumentAndUserID(Nullable<int> documentTypeID, Nullable<int> userId, Nullable<int> tempCPScreenDataID)
        {
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var tempCPScreenDataIDParameter = tempCPScreenDataID.HasValue ?
                new ObjectParameter("TempCPScreenDataID", tempCPScreenDataID) :
                new ObjectParameter("TempCPScreenDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetDynamicControlValueByDocumentAndUserID", documentTypeIDParameter, userIdParameter, tempCPScreenDataIDParameter);
        }
    
        public virtual ObjectResult<uspGetDynamicControlValuesByDocumentAndUserID_Result> uspGetDynamicControlValuesByDocumentAndUserID(Nullable<int> documentTypeID, Nullable<int> userId, Nullable<int> tempCPScreenDataID)
        {
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var tempCPScreenDataIDParameter = tempCPScreenDataID.HasValue ?
                new ObjectParameter("TempCPScreenDataID", tempCPScreenDataID) :
                new ObjectParameter("TempCPScreenDataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDynamicControlValuesByDocumentAndUserID_Result>("uspGetDynamicControlValuesByDocumentAndUserID", documentTypeIDParameter, userIdParameter, tempCPScreenDataIDParameter);
        }
    
        public virtual int uspMoveDataFromExceptionToCPScreenTable(Nullable<int> faxId, Nullable<int> userId)
        {
            var faxIdParameter = faxId.HasValue ?
                new ObjectParameter("FaxId", faxId) :
                new ObjectParameter("FaxId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMoveDataFromExceptionToCPScreenTable", faxIdParameter, userIdParameter);
        }
    
        public virtual int uspMoveDataToCPScreenTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMoveDataToCPScreenTable");
        }
    
        public virtual int uspMoveDataToExceptionTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMoveDataToExceptionTable");
        }
    
        public virtual int uspMoveDataToPermanentTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMoveDataToPermanentTable");
        }
    
        public virtual int uspMoveDataToQCForDifferentDocumentType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMoveDataToQCForDifferentDocumentType");
        }
    
        public virtual int uspProcessAuditRule(Nullable<int> faxId, Nullable<int> cMS_CPScreenDocumentdTypeId, Nullable<int> countFaxId)
        {
            var faxIdParameter = faxId.HasValue ?
                new ObjectParameter("FaxId", faxId) :
                new ObjectParameter("FaxId", typeof(int));
    
            var cMS_CPScreenDocumentdTypeIdParameter = cMS_CPScreenDocumentdTypeId.HasValue ?
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", cMS_CPScreenDocumentdTypeId) :
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", typeof(int));
    
            var countFaxIdParameter = countFaxId.HasValue ?
                new ObjectParameter("CountFaxId", countFaxId) :
                new ObjectParameter("CountFaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessAuditRule", faxIdParameter, cMS_CPScreenDocumentdTypeIdParameter, countFaxIdParameter);
        }
    
        public virtual int uspProcessAuditRule_ver1(Nullable<int> faxId, Nullable<int> cMS_CPScreenDocumentdTypeId, Nullable<int> countFaxId)
        {
            var faxIdParameter = faxId.HasValue ?
                new ObjectParameter("FaxId", faxId) :
                new ObjectParameter("FaxId", typeof(int));
    
            var cMS_CPScreenDocumentdTypeIdParameter = cMS_CPScreenDocumentdTypeId.HasValue ?
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", cMS_CPScreenDocumentdTypeId) :
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", typeof(int));
    
            var countFaxIdParameter = countFaxId.HasValue ?
                new ObjectParameter("CountFaxId", countFaxId) :
                new ObjectParameter("CountFaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessAuditRule_ver1", faxIdParameter, cMS_CPScreenDocumentdTypeIdParameter, countFaxIdParameter);
        }
    
        public virtual int uspProcessAuditRule_ver2(Nullable<int> faxId, Nullable<int> cMS_CPScreenDocumentdTypeId, Nullable<int> countFaxId)
        {
            var faxIdParameter = faxId.HasValue ?
                new ObjectParameter("FaxId", faxId) :
                new ObjectParameter("FaxId", typeof(int));
    
            var cMS_CPScreenDocumentdTypeIdParameter = cMS_CPScreenDocumentdTypeId.HasValue ?
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", cMS_CPScreenDocumentdTypeId) :
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", typeof(int));
    
            var countFaxIdParameter = countFaxId.HasValue ?
                new ObjectParameter("CountFaxId", countFaxId) :
                new ObjectParameter("CountFaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessAuditRule_ver2", faxIdParameter, cMS_CPScreenDocumentdTypeIdParameter, countFaxIdParameter);
        }
    
        public virtual int uspProcessAuditRule_ver5(Nullable<int> faxId, Nullable<int> cMS_CPScreenDocumentdTypeId, Nullable<int> countFaxId)
        {
            var faxIdParameter = faxId.HasValue ?
                new ObjectParameter("FaxId", faxId) :
                new ObjectParameter("FaxId", typeof(int));
    
            var cMS_CPScreenDocumentdTypeIdParameter = cMS_CPScreenDocumentdTypeId.HasValue ?
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", cMS_CPScreenDocumentdTypeId) :
                new ObjectParameter("CMS_CPScreenDocumentdTypeId", typeof(int));
    
            var countFaxIdParameter = countFaxId.HasValue ?
                new ObjectParameter("CountFaxId", countFaxId) :
                new ObjectParameter("CountFaxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProcessAuditRule_ver5", faxIdParameter, cMS_CPScreenDocumentdTypeIdParameter, countFaxIdParameter);
        }
    
        public virtual int uspTaskAssignment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTaskAssignment");
        }
    }
}
